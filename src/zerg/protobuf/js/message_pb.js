/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb_message.CS11001', null, global);
goog.exportSymbol('proto.pb_message.CS11001.PB_PlatformType', null, global);
goog.exportSymbol('proto.pb_message.CS11001.PacketType', null, global);
goog.exportSymbol('proto.pb_message.PB_AccountLoginHistory', null, global);
goog.exportSymbol('proto.pb_message.PB_AccountLoginHistory.PB_LoginRoleTye', null, global);
goog.exportSymbol('proto.pb_message.PB_CommonMsg', null, global);
goog.exportSymbol('proto.pb_message.PB_ServerInfo', null, global);
goog.exportSymbol('proto.pb_message.PB_ServerInfo.PB_ServerStatus', null, global);
goog.exportSymbol('proto.pb_message.SC10000', null, global);
goog.exportSymbol('proto.pb_message.SC10000.PacketType', null, global);
goog.exportSymbol('proto.pb_message.SC10000.errorCodeType', null, global);
goog.exportSymbol('proto.pb_message.SC11002', null, global);
goog.exportSymbol('proto.pb_message.SC11002.PacketType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb_message.PB_CommonMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb_message.PB_CommonMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb_message.PB_CommonMsg.displayName = 'proto.pb_message.PB_CommonMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb_message.PB_CommonMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.pb_message.PB_CommonMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb_message.PB_CommonMsg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb_message.PB_CommonMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: msg.getMsgid(),
    opcode: msg.getOpcode(),
    msgbuf: msg.getMsgbuf_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb_message.PB_CommonMsg}
 */
proto.pb_message.PB_CommonMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb_message.PB_CommonMsg;
  return proto.pb_message.PB_CommonMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb_message.PB_CommonMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb_message.PB_CommonMsg}
 */
proto.pb_message.PB_CommonMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpcode(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgbuf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb_message.PB_CommonMsg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.PB_CommonMsg.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb_message.PB_CommonMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.PB_CommonMsg.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMsgid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getOpcode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getMsgbuf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb_message.PB_CommonMsg} The clone.
 */
proto.pb_message.PB_CommonMsg.prototype.cloneMessage = function() {
  return /** @type {!proto.pb_message.PB_CommonMsg} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 msgId = 1;
 * @return {number}
 */
proto.pb_message.PB_CommonMsg.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb_message.PB_CommonMsg.prototype.setMsgid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 opCode = 2;
 * @return {number}
 */
proto.pb_message.PB_CommonMsg.prototype.getOpcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.pb_message.PB_CommonMsg.prototype.setOpcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes msgBuf = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pb_message.PB_CommonMsg.prototype.getMsgbuf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes msgBuf = 3;
 * This is a type-conversion wrapper around `getMsgbuf()`
 * @return {string}
 */
proto.pb_message.PB_CommonMsg.prototype.getMsgbuf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgbuf()));
};


/**
 * optional bytes msgBuf = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgbuf()`
 * @return {!Uint8Array}
 */
proto.pb_message.PB_CommonMsg.prototype.getMsgbuf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgbuf()));
};


/** @param {!(string|Uint8Array)} value  */
proto.pb_message.PB_CommonMsg.prototype.setMsgbuf = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb_message.SC10000 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb_message.SC10000, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb_message.SC10000.displayName = 'proto.pb_message.SC10000';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb_message.SC10000.prototype.toObject = function(opt_includeInstance) {
  return proto.pb_message.SC10000.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb_message.SC10000} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb_message.SC10000.toObject = function(includeInstance, msg) {
  var f, obj = {
    errormsg: msg.getErrormsg(),
    csopcode: msg.getCsopcode(),
    errorcode: msg.getErrorcode()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb_message.SC10000}
 */
proto.pb_message.SC10000.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb_message.SC10000;
  return proto.pb_message.SC10000.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb_message.SC10000} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb_message.SC10000}
 */
proto.pb_message.SC10000.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormsg(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCsopcode(value);
      break;
    case 3:
      var value = /** @type {!proto.pb_message.SC10000.errorCodeType} */ (reader.readEnum());
      msg.setErrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb_message.SC10000} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.SC10000.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb_message.SC10000.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.SC10000.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getErrormsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCsopcode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getErrorcode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb_message.SC10000} The clone.
 */
proto.pb_message.SC10000.prototype.cloneMessage = function() {
  return /** @type {!proto.pb_message.SC10000} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string errorMsg = 1;
 * @return {string}
 */
proto.pb_message.SC10000.prototype.getErrormsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.pb_message.SC10000.prototype.setErrormsg = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 csOpcode = 2;
 * @return {number}
 */
proto.pb_message.SC10000.prototype.getCsopcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.pb_message.SC10000.prototype.setCsopcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional errorCodeType errorCode = 3;
 * @return {!proto.pb_message.SC10000.errorCodeType}
 */
proto.pb_message.SC10000.prototype.getErrorcode = function() {
  return /** @type {!proto.pb_message.SC10000.errorCodeType} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.pb_message.SC10000.errorCodeType} value  */
proto.pb_message.SC10000.prototype.setErrorcode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.pb_message.SC10000.PacketType = {
  PB_TEMP: 0,
  PB_PACKRETTYPE: 10000
};

/**
 * @enum {number}
 */
proto.pb_message.SC10000.errorCodeType = {
  PB_BUFFPRASEERROR: 0,
  PB_MSGPRASEERROR: 1,
  PB_MSGDEALERROR: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb_message.PB_ServerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb_message.PB_ServerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb_message.PB_ServerInfo.displayName = 'proto.pb_message.PB_ServerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb_message.PB_ServerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb_message.PB_ServerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb_message.PB_ServerInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb_message.PB_ServerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverid: msg.getServerid(),
    servername: msg.getServername(),
    serverurl: msg.getServerurl(),
    tcpip: msg.getTcpip(),
    tcpport: msg.getTcpport(),
    status: msg.getStatus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb_message.PB_ServerInfo}
 */
proto.pb_message.PB_ServerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb_message.PB_ServerInfo;
  return proto.pb_message.PB_ServerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb_message.PB_ServerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb_message.PB_ServerInfo}
 */
proto.pb_message.PB_ServerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpip(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpport(value);
      break;
    case 6:
      var value = /** @type {!proto.pb_message.PB_ServerInfo.PB_ServerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb_message.PB_ServerInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.PB_ServerInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb_message.PB_ServerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.PB_ServerInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getServername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getServerurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTcpip();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTcpport();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb_message.PB_ServerInfo} The clone.
 */
proto.pb_message.PB_ServerInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.pb_message.PB_ServerInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 serverId = 1;
 * @return {number}
 */
proto.pb_message.PB_ServerInfo.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb_message.PB_ServerInfo.prototype.setServerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string serverName = 2;
 * @return {string}
 */
proto.pb_message.PB_ServerInfo.prototype.getServername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb_message.PB_ServerInfo.prototype.setServername = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string serverUrl = 3;
 * @return {string}
 */
proto.pb_message.PB_ServerInfo.prototype.getServerurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb_message.PB_ServerInfo.prototype.setServerurl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string tcpIp = 4;
 * @return {string}
 */
proto.pb_message.PB_ServerInfo.prototype.getTcpip = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.pb_message.PB_ServerInfo.prototype.setTcpip = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string tcpPort = 5;
 * @return {string}
 */
proto.pb_message.PB_ServerInfo.prototype.getTcpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.pb_message.PB_ServerInfo.prototype.setTcpport = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional PB_ServerStatus status = 6;
 * @return {!proto.pb_message.PB_ServerInfo.PB_ServerStatus}
 */
proto.pb_message.PB_ServerInfo.prototype.getStatus = function() {
  return /** @type {!proto.pb_message.PB_ServerInfo.PB_ServerStatus} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {!proto.pb_message.PB_ServerInfo.PB_ServerStatus} value  */
proto.pb_message.PB_ServerInfo.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.pb_message.PB_ServerInfo.PB_ServerStatus = {
  GOOD: 0,
  CROWD: 1,
  BUSY: 2,
  MAINTAIN: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb_message.PB_AccountLoginHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb_message.PB_AccountLoginHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb_message.PB_AccountLoginHistory.displayName = 'proto.pb_message.PB_AccountLoginHistory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.pb_message.PB_AccountLoginHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb_message.PB_AccountLoginHistory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb_message.PB_AccountLoginHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverid: msg.getServerid(),
    roletype: msg.getRoletype(),
    rolename: msg.getRolename(),
    rolelevel: msg.getRolelevel(),
    awakelevel: msg.getAwakelevel(),
    viplevel: msg.getViplevel(),
    updatetime: msg.getUpdatetime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb_message.PB_AccountLoginHistory}
 */
proto.pb_message.PB_AccountLoginHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb_message.PB_AccountLoginHistory;
  return proto.pb_message.PB_AccountLoginHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb_message.PB_AccountLoginHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb_message.PB_AccountLoginHistory}
 */
proto.pb_message.PB_AccountLoginHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 2:
      var value = /** @type {!proto.pb_message.PB_AccountLoginHistory.PB_LoginRoleTye} */ (reader.readEnum());
      msg.setRoletype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRolename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRolelevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAwakelevel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViplevel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb_message.PB_AccountLoginHistory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.PB_AccountLoginHistory.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.PB_AccountLoginHistory.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getRoletype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getRolename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getRolelevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getAwakelevel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getViplevel();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getUpdatetime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb_message.PB_AccountLoginHistory} The clone.
 */
proto.pb_message.PB_AccountLoginHistory.prototype.cloneMessage = function() {
  return /** @type {!proto.pb_message.PB_AccountLoginHistory} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 serverId = 1;
 * @return {number}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb_message.PB_AccountLoginHistory.prototype.setServerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional PB_LoginRoleTye roleType = 2;
 * @return {!proto.pb_message.PB_AccountLoginHistory.PB_LoginRoleTye}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.getRoletype = function() {
  return /** @type {!proto.pb_message.PB_AccountLoginHistory.PB_LoginRoleTye} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.pb_message.PB_AccountLoginHistory.PB_LoginRoleTye} value  */
proto.pb_message.PB_AccountLoginHistory.prototype.setRoletype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string roleName = 3;
 * @return {string}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.getRolename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb_message.PB_AccountLoginHistory.prototype.setRolename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 roleLevel = 4;
 * @return {number}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.getRolelevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.pb_message.PB_AccountLoginHistory.prototype.setRolelevel = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 awakeLevel = 5;
 * @return {number}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.getAwakelevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.pb_message.PB_AccountLoginHistory.prototype.setAwakelevel = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 vipLevel = 6;
 * @return {number}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.getViplevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.pb_message.PB_AccountLoginHistory.prototype.setViplevel = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 updateTime = 7;
 * @return {number}
 */
proto.pb_message.PB_AccountLoginHistory.prototype.getUpdatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.pb_message.PB_AccountLoginHistory.prototype.setUpdatetime = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.pb_message.PB_AccountLoginHistory.PB_LoginRoleTye = {
  MAN: 0,
  WOMEN: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb_message.CS11001 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb_message.CS11001, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb_message.CS11001.displayName = 'proto.pb_message.CS11001';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb_message.CS11001.prototype.toObject = function(opt_includeInstance) {
  return proto.pb_message.CS11001.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb_message.CS11001} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb_message.CS11001.toObject = function(includeInstance, msg) {
  var f, obj = {
    platformtype: msg.getPlatformtype(),
    platformaccountid: msg.getPlatformaccountid(),
    authid: msg.getAuthid(),
    clienttype: msg.getClienttype(),
    uuid: msg.getUuid(),
    channelid: msg.getChannelid(),
    adchannelid: msg.getAdchannelid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb_message.CS11001}
 */
proto.pb_message.CS11001.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb_message.CS11001;
  return proto.pb_message.CS11001.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb_message.CS11001} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb_message.CS11001}
 */
proto.pb_message.CS11001.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb_message.CS11001.PB_PlatformType} */ (reader.readEnum());
      msg.setPlatformtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatformaccountid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAdchannelid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb_message.CS11001} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.CS11001.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb_message.CS11001.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.CS11001.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlatformtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getPlatformaccountid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAuthid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getUuid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getChannelid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getAdchannelid();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb_message.CS11001} The clone.
 */
proto.pb_message.CS11001.prototype.cloneMessage = function() {
  return /** @type {!proto.pb_message.CS11001} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional PB_PlatformType platformType = 1;
 * @return {!proto.pb_message.CS11001.PB_PlatformType}
 */
proto.pb_message.CS11001.prototype.getPlatformtype = function() {
  return /** @type {!proto.pb_message.CS11001.PB_PlatformType} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.pb_message.CS11001.PB_PlatformType} value  */
proto.pb_message.CS11001.prototype.setPlatformtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string platformAccountId = 2;
 * @return {string}
 */
proto.pb_message.CS11001.prototype.getPlatformaccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb_message.CS11001.prototype.setPlatformaccountid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string authId = 3;
 * @return {string}
 */
proto.pb_message.CS11001.prototype.getAuthid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb_message.CS11001.prototype.setAuthid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string clientType = 4;
 * @return {string}
 */
proto.pb_message.CS11001.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.pb_message.CS11001.prototype.setClienttype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string uuid = 5;
 * @return {string}
 */
proto.pb_message.CS11001.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.pb_message.CS11001.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 channelId = 6;
 * @return {number}
 */
proto.pb_message.CS11001.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.pb_message.CS11001.prototype.setChannelid = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 adChannelId = 7;
 * @return {number}
 */
proto.pb_message.CS11001.prototype.getAdchannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.pb_message.CS11001.prototype.setAdchannelid = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.pb_message.CS11001.PacketType = {
  PB_TEMP: 0,
  PB_PACKTYPE: 11001,
  PB_PACKRETTYPE: 11002
};

/**
 * @enum {number}
 */
proto.pb_message.CS11001.PB_PlatformType = {
  LOCAL_LOGIN: 0,
  PLATFORM_LOGIN: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb_message.SC11002 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb_message.SC11002.repeatedFields_, null);
};
goog.inherits(proto.pb_message.SC11002, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb_message.SC11002.displayName = 'proto.pb_message.SC11002';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb_message.SC11002.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb_message.SC11002.prototype.toObject = function(opt_includeInstance) {
  return proto.pb_message.SC11002.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb_message.SC11002} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb_message.SC11002.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountid: msg.getAccountid(),
    sessionid: msg.getSessionid(),
    platformaccountid: msg.getPlatformaccountid(),
    platformaccountname: msg.getPlatformaccountname(),
    accesstoken: msg.getAccesstoken(),
    loginhistoriesList: jspb.Message.toObjectList(msg.getLoginhistoriesList(),
    proto.pb_message.PB_AccountLoginHistory.toObject, includeInstance),
    serverinfosList: jspb.Message.toObjectList(msg.getServerinfosList(),
    proto.pb_message.PB_ServerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb_message.SC11002}
 */
proto.pb_message.SC11002.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb_message.SC11002;
  return proto.pb_message.SC11002.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb_message.SC11002} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb_message.SC11002}
 */
proto.pb_message.SC11002.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatformaccountid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatformaccountname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 6:
      var value = new proto.pb_message.PB_AccountLoginHistory;
      reader.readMessage(value,proto.pb_message.PB_AccountLoginHistory.deserializeBinaryFromReader);
      msg.getLoginhistoriesList().push(value);
      msg.setLoginhistoriesList(msg.getLoginhistoriesList());
      break;
    case 7:
      var value = new proto.pb_message.PB_ServerInfo;
      reader.readMessage(value,proto.pb_message.PB_ServerInfo.deserializeBinaryFromReader);
      msg.getServerinfosList().push(value);
      msg.setServerinfosList(msg.getServerinfosList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb_message.SC11002} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.SC11002.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb_message.SC11002.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb_message.SC11002.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccountid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPlatformaccountid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPlatformaccountname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getLoginhistoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pb_message.PB_AccountLoginHistory.serializeBinaryToWriter
    );
  }
  f = this.getServerinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.pb_message.PB_ServerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb_message.SC11002} The clone.
 */
proto.pb_message.SC11002.prototype.cloneMessage = function() {
  return /** @type {!proto.pb_message.SC11002} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 accountId = 1;
 * @return {number}
 */
proto.pb_message.SC11002.prototype.getAccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb_message.SC11002.prototype.setAccountid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string sessionId = 2;
 * @return {string}
 */
proto.pb_message.SC11002.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb_message.SC11002.prototype.setSessionid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string platformAccountId = 3;
 * @return {string}
 */
proto.pb_message.SC11002.prototype.getPlatformaccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb_message.SC11002.prototype.setPlatformaccountid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string platformAccountName = 4;
 * @return {string}
 */
proto.pb_message.SC11002.prototype.getPlatformaccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.pb_message.SC11002.prototype.setPlatformaccountname = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string accessToken = 5;
 * @return {string}
 */
proto.pb_message.SC11002.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.pb_message.SC11002.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated PB_AccountLoginHistory loginHistories = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pb_message.PB_AccountLoginHistory>}
 */
proto.pb_message.SC11002.prototype.getLoginhistoriesList = function() {
  return /** @type{!Array.<!proto.pb_message.PB_AccountLoginHistory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb_message.PB_AccountLoginHistory, 6));
};


/** @param {Array.<!proto.pb_message.PB_AccountLoginHistory>} value  */
proto.pb_message.SC11002.prototype.setLoginhistoriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.pb_message.SC11002.prototype.clearLoginhistoriesList = function() {
  this.setLoginhistoriesList([]);
};


/**
 * repeated PB_ServerInfo serverInfos = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pb_message.PB_ServerInfo>}
 */
proto.pb_message.SC11002.prototype.getServerinfosList = function() {
  return /** @type{!Array.<!proto.pb_message.PB_ServerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb_message.PB_ServerInfo, 7));
};


/** @param {Array.<!proto.pb_message.PB_ServerInfo>} value  */
proto.pb_message.SC11002.prototype.setServerinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.pb_message.SC11002.prototype.clearServerinfosList = function() {
  this.setServerinfosList([]);
};


/**
 * @enum {number}
 */
proto.pb_message.SC11002.PacketType = {
  PB_TEMP: 0,
  PB_PACKTYPE: 10001
};

goog.object.extend(exports, proto.pb_message);
