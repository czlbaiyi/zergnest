// Code generated by protoc-gen-go.
// source: basemsg.proto
// DO NOT EDIT!

/*
Package basemsg is a generated protocol buffer package.

It is generated from these files:
	basemsg.proto

It has these top-level messages:
	PB_CommonMsg
	SC10000
*/
package basemsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SC10000_PacketType int32

const (
	SC10000_PB_Temp        SC10000_PacketType = 0
	SC10000_PB_PackRetType SC10000_PacketType = 10000
)

var SC10000_PacketType_name = map[int32]string{
	0:     "PB_Temp",
	10000: "PB_PackRetType",
}
var SC10000_PacketType_value = map[string]int32{
	"PB_Temp":        0,
	"PB_PackRetType": 10000,
}

func (x SC10000_PacketType) String() string {
	return proto.EnumName(SC10000_PacketType_name, int32(x))
}
func (SC10000_PacketType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type SC10000ErrorCodeType int32

const (
	SC10000_PB_BuffPraseError SC10000ErrorCodeType = 0
	SC10000_PB_MsgPraseError  SC10000ErrorCodeType = 1
	SC10000_PB_MsgDealError   SC10000ErrorCodeType = 2
)

var SC10000ErrorCodeType_name = map[int32]string{
	0: "PB_BuffPraseError",
	1: "PB_MsgPraseError",
	2: "PB_MsgDealError",
}
var SC10000ErrorCodeType_value = map[string]int32{
	"PB_BuffPraseError": 0,
	"PB_MsgPraseError":  1,
	"PB_MsgDealError":   2,
}

func (x SC10000ErrorCodeType) String() string {
	return proto.EnumName(SC10000ErrorCodeType_name, int32(x))
}
func (SC10000ErrorCodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

// //////////////////////////////////////////////通用协议///////////////////////////////////
// 通用消息包
type PB_CommonMsg struct {
	MsgId  int32  `protobuf:"varint,1,opt,name=msgId" json:"msgId,omitempty"`
	OpCode int32  `protobuf:"varint,2,opt,name=opCode" json:"opCode,omitempty"`
	MsgBuf []byte `protobuf:"bytes,3,opt,name=msgBuf,proto3" json:"msgBuf,omitempty"`
}

func (m *PB_CommonMsg) Reset()                    { *m = PB_CommonMsg{} }
func (m *PB_CommonMsg) String() string            { return proto.CompactTextString(m) }
func (*PB_CommonMsg) ProtoMessage()               {}
func (*PB_CommonMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 通用错误返回
type SC10000 struct {
	ErrorMsg  string               `protobuf:"bytes,1,opt,name=errorMsg" json:"errorMsg,omitempty"`
	CsOpcode  int32                `protobuf:"varint,2,opt,name=csOpcode" json:"csOpcode,omitempty"`
	ErrorCode SC10000ErrorCodeType `protobuf:"varint,3,opt,name=errorCode,enum=basemsg.SC10000ErrorCodeType" json:"errorCode,omitempty"`
}

func (m *SC10000) Reset()                    { *m = SC10000{} }
func (m *SC10000) String() string            { return proto.CompactTextString(m) }
func (*SC10000) ProtoMessage()               {}
func (*SC10000) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*PB_CommonMsg)(nil), "basemsg.PB_CommonMsg")
	proto.RegisterType((*SC10000)(nil), "basemsg.SC10000")
	proto.RegisterEnum("basemsg.SC10000_PacketType", SC10000_PacketType_name, SC10000_PacketType_value)
	proto.RegisterEnum("basemsg.SC10000ErrorCodeType", SC10000ErrorCodeType_name, SC10000ErrorCodeType_value)
}

func init() { proto.RegisterFile("basemsg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0x9b, 0xa2, 0x36, 0xf4, 0xd1, 0x96, 0xf0, 0x5a, 0x50, 0xc4, 0x80, 0xaa, 0x4c, 0x9d,
	0xa2, 0x00, 0x2b, 0x93, 0x03, 0x03, 0x43, 0xc0, 0x84, 0xec, 0x51, 0x9a, 0x3a, 0x1e, 0xc0, 0xd8,
	0xb2, 0xdb, 0x81, 0x95, 0x2f, 0xe0, 0x93, 0x91, 0x9d, 0x90, 0xc2, 0x78, 0xee, 0xbd, 0x3e, 0x96,
	0x0d, 0xb3, 0x4d, 0x65, 0x98, 0x30, 0x3c, 0x56, 0x5a, 0xee, 0x24, 0xfa, 0x1d, 0x46, 0x05, 0x4c,
	0x29, 0x29, 0x53, 0x29, 0x84, 0xfc, 0xc8, 0x0c, 0xc7, 0x25, 0x8c, 0x84, 0xe1, 0x8f, 0xdb, 0xd0,
	0x5b, 0x79, 0xeb, 0x51, 0xde, 0x02, 0x5e, 0xc0, 0x58, 0xaa, 0x54, 0x6e, 0x59, 0x38, 0x74, 0x71,
	0x47, 0x36, 0x17, 0x86, 0x93, 0x7d, 0x13, 0x1e, 0xad, 0xbc, 0xf5, 0x34, 0xef, 0x28, 0xfa, 0x1a,
	0x82, 0xff, 0x9a, 0x5e, 0x27, 0x49, 0x92, 0xe0, 0x25, 0x1c, 0x33, 0xad, 0xa5, 0xce, 0x0c, 0x77,
	0xd2, 0x49, 0xde, 0xb3, 0xed, 0x6a, 0xf3, 0xac, 0xea, 0x83, 0xb9, 0x67, 0xbc, 0x83, 0x89, 0xdb,
	0xb9, 0x6b, 0xad, 0x7e, 0x7e, 0x73, 0x15, 0xff, 0xbe, 0xa2, 0x93, 0xc7, 0xfd, 0xa2, 0xf8, 0x54,
	0x2c, 0x3f, 0x1c, 0x88, 0x62, 0x00, 0x5a, 0xd5, 0x6f, 0x6c, 0x67, 0x0b, 0x3c, 0x01, 0x9f, 0x92,
	0xb2, 0x60, 0x42, 0x05, 0x03, 0x5c, 0xc0, 0x9c, 0x92, 0xd2, 0xb6, 0x79, 0x5b, 0x07, 0xdf, 0x4f,
	0xd1, 0x0b, 0xcc, 0xfe, 0xb9, 0xf0, 0x1c, 0xce, 0x28, 0x29, 0xc9, 0xbe, 0x69, 0xa8, 0xae, 0x0c,
	0x7b, 0xb0, 0x65, 0x30, 0xc0, 0x25, 0x04, 0x94, 0x94, 0x99, 0xe1, 0x7f, 0x52, 0x0f, 0x17, 0x70,
	0xda, 0xa6, 0xf7, 0xac, 0x7a, 0x6f, 0xc3, 0xe1, 0x66, 0xec, 0xbe, 0xfa, 0xf6, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x62, 0x9e, 0x1d, 0x2c, 0x7b, 0x01, 0x00, 0x00,
}
